"use strict";
/******************************************************************
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Mora <qiuzhongleiabc@126.com> (https://github.com/qiu8310)
*******************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var custom_1 = require("./custom");
var dev_1 = require("./dev/");
// 优先级
// customs > natives > basics
/**
 * 自动补全支持的所有的 tag
 * @param {CustomOptions} co 用于解析自定义组件的配置
 */
function autocompleteTagName(lc, co) {
    return __awaiter(this, void 0, void 0, function () {
        var natives, customs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    natives = lc.components.concat(dev_1.components).map(mapComponent);
                    return [4 /*yield*/, custom_1.getCustomComponents(co)];
                case 1:
                    customs = (_a.sent()).map(mapComponent);
                    return [2 /*return*/, {
                            customs: customs,
                            natives: natives,
                        }];
            }
        });
    });
}
exports.autocompleteTagName = autocompleteTagName;
/**
 * 自动补全 tag 上的属性
 *
 * @export
 * @param {string} tagName 当前 tag 的名称
 * @param {{[key: string]: string}} attrs 当前已经写了的属性的集合
 * @param {CustomOptions} co 用于解析自定义组件的配置
 */
function autocompleteTagAttr(tagName, tagAttrs, lc, co) {
    return __awaiter(this, void 0, void 0, function () {
        var attrs, filter, noBasics;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getAvailableAttrs(tagName, tagAttrs, lc, co)
                    // 属性不能是已经存在的，也不能是事件
                ];
                case 1:
                    attrs = _a.sent();
                    filter = createComponentFilter(tagAttrs, false);
                    noBasics = lc.noBasicAttrsComponents && lc.noBasicAttrsComponents.includes(tagName);
                    return [2 /*return*/, {
                            basics: noBasics ? [] : lc.baseAttrs.filter(filter).map(mapComponentAttr),
                            natives: attrs.filter(filter).map(mapComponentAttr),
                        }];
            }
        });
    });
}
exports.autocompleteTagAttr = autocompleteTagAttr;
/**
 * 自动补全指定的属性的值
 */
function autocompleteTagAttrValue(tagName, tagAttrName, lc, co) {
    return __awaiter(this, void 0, void 0, function () {
        var comp, attr, values;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getComponent(tagName, lc, co)];
                case 1:
                    comp = _a.sent();
                    if (!comp || !comp.attrs)
                        return [2 /*return*/, []];
                    attr = comp.attrs.find(function (a) { return a.name === tagAttrName; });
                    if (!attr)
                        return [2 /*return*/, []];
                    values = attr.enum
                        ? attr.enum
                        : attr.subAttrs
                            ? attr.subAttrs.map(function (s) { return ({ value: s.equal }); })
                            : [];
                    return [2 /*return*/, values.map(function (v) {
                            return {
                                value: v.value,
                                markdown: dev_1.getComponentAttrValueMarkdown(v),
                            };
                        })];
            }
        });
    });
}
exports.autocompleteTagAttrValue = autocompleteTagAttrValue;
function autocompleteSpecialTagAttr(prefix, tagName, tagAttrs, lc, co) {
    return __awaiter(this, void 0, void 0, function () {
        var customs, natives;
        return __generator(this, function (_a) {
            customs = [];
            natives = [];
            if (lc.custom.hasOwnProperty(prefix)) {
                natives = lc.custom[prefix].attrs.filter(function (attr) { return tagAttrs[prefix + attr.name] == null; }).map(mapComponentAttr);
            }
            else if (lc.event.prefixes.includes(prefix)) {
                customs = [];
                /* let filter = createComponentFilter(tagAttrs, true)
                customs = (await getAvailableAttrs(tagName, tagAttrs, lc, co))
                  .filter(filter)
                  .map(a => ({ ...a, name: a.name.replace(/^(bind|catch)/, '') } as ComponentAttr)) // 去除 bind/catch 前缀
                  .map(mapComponentAttr) */
                natives = lc.event.attrs.filter(function (attr) { return tagAttrs[prefix + attr.name] == null; }).map(mapComponentAttr);
            }
            return [2 /*return*/, { customs: customs, natives: natives }];
        });
    });
}
exports.autocompleteSpecialTagAttr = autocompleteSpecialTagAttr;
function mapComponent(component) {
    return { component: component, markdown: dev_1.getComponentMarkdown(component) };
}
function mapComponentAttr(attr) {
    return { attr: attr, markdown: dev_1.getComponentAttrMarkdown(attr) };
}
function createComponentFilter(existsTagAttrs, event) {
    return function (attr) {
        // let isEvent = attr.name.startsWith('bind') || attr.name.startsWith('catch')
        var isEvent = false;
        return existsTagAttrs[attr.name] == null && (event == null || (event ? isEvent : !isEvent));
    };
}
function getComponent(tagName, lc, co) {
    return __awaiter(this, void 0, void 0, function () {
        var comp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    comp = lc.components.concat(dev_1.components).find(function (c) { return c.name === tagName; });
                    if (!!comp) return [3 /*break*/, 2];
                    return [4 /*yield*/, custom_1.getCustomComponents(co)];
                case 1:
                    comp = (_a.sent()).find(function (c) { return c.name === tagName; });
                    _a.label = 2;
                case 2: return [2 /*return*/, comp];
            }
        });
    });
}
function getAvailableAttrs(tagName, tagAttrs, lc, co) {
    return __awaiter(this, void 0, void 0, function () {
        var comp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getComponent(tagName, lc, co)];
                case 1:
                    comp = _a.sent();
                    return [2 /*return*/, comp ? getAvailableAttrsFromComponent(comp, tagAttrs) : []];
            }
        });
    });
}
function getAvailableAttrsFromComponent(comp, tagAttrs) {
    var attrs = comp.attrs || [];
    var results = attrs.filter(function (a) { return tagAttrs[a.name] == null; }) // 先取出没有写的属性
    ;
    results.slice().forEach(function (a) {
        if (a.subAttrs) {
            a.subAttrs.forEach(function (s) {
                s.attrs.forEach(function (suba) {
                    if (results.every(function (_) { return _.name !== suba.name; }))
                        results.push(suba); // 去重
                });
            });
        }
    });
    // 写了的属性需要找出 subAttrs
    attrs
        .filter(function (a) { return tagAttrs[a.name] != null && a.subAttrs && a.subAttrs.length; })
        .forEach(function (a) {
        var sub = (a.subAttrs || []).find(function (s) { return s.equal === tagAttrs[a.name]; });
        if (sub)
            results.push.apply(results, sub.attrs.filter(function (sa) { return tagAttrs[sa.name] == null; }));
    });
    return results;
}
