"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var iterateInheritedPrototype_1 = require("./iterateInheritedPrototype");
/**
 *
 * 将一个可能包含原型链的对象扁平化成单个对象
 *
 * 如，现有这样的类的继承关系 A -> B -> C，当创建一个实例 a = new A() 时
 *
 * a 实例会存有 B、C 的原型链，使用此函数 newa = toObject(a) 之后，
 * newa 就会变成一个 PlainObject，但它有 A、B、C 上的所有属性和方法，
 * 当然不包括静态属性或方法
 *
 * 注意1：用此方法的话，尽量避免在类中使用胖函数，胖函数的 this 死死的绑定
 * 在原对象中，无法重新绑定
 *
 * 注意2：类继承的时候不要在函数中调用 super，toObject 之后是扁平的，没有 super 之说
 */
function toObject(something, options) {
    if (options === void 0) { options = {}; }
    var obj = {};
    if (!isObject(something))
        return obj;
    var excludes = options.excludes || ['constructor'];
    var _a = options.enumerable, enumerable = _a === void 0 ? true : _a, _b = options.configurable, configurable = _b === void 0 ? 0 : _b, _c = options.writable, writable = _c === void 0 ? 0 : _c;
    var defaultDesc = {};
    if (enumerable !== 0)
        defaultDesc.enumerable = enumerable;
    if (configurable !== 0)
        defaultDesc.configurable = configurable;
    if (writable !== 0)
        defaultDesc.writable = writable;
    iterateInheritedPrototype_1.iterateInheritedPrototype(function (proto) {
        Object.getOwnPropertyNames(proto).forEach(function (key) {
            if (excludes.indexOf(key) >= 0)
                return;
            if (obj.hasOwnProperty(key))
                return;
            var desc = Object.getOwnPropertyDescriptor(proto, key);
            var fnKeys = ['get', 'set', 'value'];
            fnKeys.forEach(function (k) {
                if (typeof desc[k] === 'function') {
                    var oldFn_1 = desc[k];
                    desc[k] = function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        return oldFn_1.apply(options.hasOwnProperty('bindTo') ? options.bindTo : this, args);
                    };
                }
            });
            Object.defineProperty(obj, key, tslib_1.__assign({}, desc, defaultDesc));
        });
    }, something, options.till || Object, false);
    return obj;
}
exports.toObject = toObject;
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * 除了 null, 及字面量，其它一般都是 Object，包括函数
 *
 * **如果只需要判断是不是纯 Object，请使用 `isPlainObject`**
 *
 * @example
 *
 * isObject({})
 * // => true
 *
 * isObject([1, 2, 3])
 * // => true
 *
 * isObject(Function)
 * // => true
 *
 * isObject(null)
 * // => false
 */
function isObject(something) {
    var type = typeof something;
    return something !== null && (type === 'function' || type === 'object');
}
exports.isObject = isObject;
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * isObjectLike({})
 * // => true
 *
 * isObjectLike([1, 2, 3])
 * // => true
 *
 * isObjectLike(Function)
 * // => false
 *
 * isObjectLike(null)
 * // => false
 */
function isObjectLike(value) {
    return typeof value === 'object' && value !== null;
}
exports.isObjectLike = isObjectLike;
/**
 * 判断 something 是不是一个原生的 Object
 */
function isPlainObject(something) {
    return toString(something) === '[object Object]';
}
exports.isPlainObject = isPlainObject;
/**
 * 判断 obj 是否是空（即不含任何 keys）
 *
 * 需要保证参数是一个 PlainObject
 */
function isPlainObjectEmpty(obj) {
    if (!isPlainObject(obj))
        throw new Error('argument is not a plain object');
    return Object.keys(obj).length === 0;
}
exports.isPlainObjectEmpty = isPlainObjectEmpty;
/**
 * 从一个对象中取出需要的属性，组成一个新对象
 */
function pick(obj, keys) {
    var res = {};
    Object.keys(obj).forEach(function (k) {
        if (keys.indexOf(k) >= 0)
            res[k] = obj[k];
    });
    return res;
}
exports.pick = pick;
/**
 * 从一个对象中排除指定的 keys，返回一个新对象
 */
function omit(obj, keys) {
    var res = {};
    Object.keys(obj).forEach(function (k) {
        if (keys.indexOf(k) < 0)
            res[k] = obj[k];
    });
    return res;
}
exports.omit = omit;
/**
 * 获取 something 对象的原生的 toString 的结果
 */
function toString(something) {
    return Object.prototype.toString.call(something);
}
exports.toString = toString;
/**
 * 判断 obj 对象是否含有某个 key （ 利用 hasOwnProperty ）
 */
function hasOwnProp(obj, key) {
    if (obj == null)
        return false;
    return Object.prototype.hasOwnProperty.call(obj, key);
}
exports.hasOwnProp = hasOwnProp;
/**
 * 深度合并 sources 对象到 target 上
 */
function deepMerge(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    sources.forEach(function (source) {
        if (source) {
            for (var s in source) {
                if (source.hasOwnProperty(s)) {
                    var value = source[s];
                    if (isPlainObject(value)) {
                        if (!isPlainObject(target[s]))
                            target[s] = {};
                        target[s] = deepMerge(target[s], value);
                    }
                    else {
                        target[s] = value;
                    }
                }
            }
        }
    });
    return target;
}
exports.deepMerge = deepMerge;
