"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 获取两个数的最大公约数  Greatest common divisor (GCD)
 *
 * Use recursion. Base case is when y equals 0. In this case, return x.
 * Otherwise, return the GCD of y and the remainder of the division x/y
 *
 * @example
 * gcd(10, 4) => 2
 */
function gcd(x, y) {
    return !y ? x : gcd(y, x % y);
}
exports.gcd = gcd;
/**
 * 获取两个数的最小公倍数 lowest common multiple
 *
 * @example
 * lcm(10, 4) => 20
 */
function lcm(x, y) {
    return (x * y) / gcd(x, y);
}
exports.lcm = lcm;
var cache = { cos: {}, sin: {}, tan: {} };
exports.DEGREE_TO_RADIAN_FRACTOR = Math.PI / 180;
function degree2radian(degree) {
    return degree * exports.DEGREE_TO_RADIAN_FRACTOR;
}
exports.degree2radian = degree2radian;
function xcos(degree) {
    degree = period(degree, 360);
    if (cache.cos[degree] == null)
        cache.cos[degree] = Math.cos(degree2radian(degree));
    return cache.cos[degree];
}
exports.xcos = xcos;
function xsin(degree) {
    degree = period(degree, 360);
    if (cache.sin[degree] == null)
        cache.sin[degree] = Math.sin(degree2radian(degree));
    return cache.sin[degree];
}
exports.xsin = xsin;
function xtan(degree) {
    degree = period(degree, 180);
    if (cache.tan[degree] == null)
        cache.tan[degree] = Math.tan(degree2radian(degree));
    return cache.tan[degree];
}
exports.xtan = xtan;
function between(value, min, max) {
    return Math.min(Math.max(min, value), max);
}
exports.between = between;
/**
 * 最小周期内的值
 *
 * @example
 *
 * period(3, 60)  -> 3
 * period(61, 60) -> 1
 */
function period(value, length) {
    if (value < 0) {
        return (value % length) + length;
    }
    else if (value < length) {
        return value;
    }
    else {
        return value % length;
    }
}
exports.period = period;
/**
 * 返回一个 >= min && < max 的数
 */
function random(min, max, integer) {
    return integer
        ? Math.floor(Math.random() * (max - min + 1)) + min
        : Math.random() * (max - min) + min;
}
exports.random = random;
/**
 * 计算数组中的数字的平均值
 */
function average(arr) {
    return arr.reduce(function (acc, val) { return acc + val; }, 0) / arr.length;
}
exports.average = average;
/**
 * 计算数组中的数字的总和
 */
function sum(arr) {
    return arr.reduce(function (acc, val) { return acc + val; }, 0);
}
exports.sum = sum;
/**
 * Rounds a number to a specified amount of digits
 *
 * Use Math.round() and template literals to round the number to the specified
 * number of digits. Omit the second argument, decimals to round to an integer.
 *
 * @example
 * round(1.005, 2) -> 1.01
 */
function round(n, decimals) {
    if (decimals === void 0) { decimals = 0; }
    return Number(Math.round(n + "e" + decimals) + "e-" + decimals);
}
exports.round = round;
/**
 * 从数组中取 m 个组成的组合
 */
function __combination(arr, m) {
    var n = arr.length;
    if (n < m || m < 1)
        return [];
    if (m === 1)
        return arr.map(function (it) { return [it]; });
    var result = [];
    var _loop_1 = function (i) {
        var start = arr[i];
        __combination(arr.slice(i + 1), m - 1).forEach(function (it) {
            result.push([start].concat(it));
        });
    };
    for (var i = 0; i < n; i++) {
        _loop_1(i);
    }
    return result;
}
/**
 * 数组的组合
 *
 * 如果指定了 n，则表示从数组中取 n 个项的组合情况
 * 如果没指定 n，表示所有的组合情况
 */
function combination(arr, n) {
    if (n)
        return __combination(arr, n);
    var result = [];
    for (var i = 0; i < arr.length; i++) {
        result.push.apply(result, __combination(arr, i + 1));
    }
    return result;
}
exports.combination = combination;
/**
 * 一个数组的所有排列可能
 */
function __permutation(arr) {
    var n = arr.length;
    if (n === 0)
        return [];
    if (n === 1)
        return [arr.slice()];
    var result = [];
    var _loop_2 = function (i) {
        var start = arr[i];
        var subResult = __permutation(arr.slice(0, i).concat(arr.slice(i + 1, n)));
        result.push.apply(result, subResult.map(function (l) { return [start].concat(l); }));
    };
    for (var i = 0; i < n; i++) {
        _loop_2(i);
    }
    return result;
}
/**
 * 数组的排列
 *
 * 如果指定了 n，则表示从数组中取 n 个项的排列情况
 * 如果没指定 n，表示所有的排列情况
 */
function permutation(arr, n) {
    var result = [];
    combination(arr, n).forEach(function (list) {
        result.push.apply(result, __permutation(list));
    });
    return result;
}
exports.permutation = permutation;
function range(a, b, c) {
    var len = arguments.length;
    var start = 0;
    var end = 0;
    var step = 1;
    if (len === 1) {
        end = a;
    }
    else if (len > 1) {
        start = a;
        // @ts-ignore
        end = b;
        // @ts-ignore
        if (len > 2)
            step = c;
    }
    var arr = [];
    for (var i = start; i < end; i += step)
        arr.push(i);
    return arr;
}
exports.range = range;
