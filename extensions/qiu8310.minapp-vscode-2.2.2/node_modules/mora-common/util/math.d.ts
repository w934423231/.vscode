/**
 * 获取两个数的最大公约数  Greatest common divisor (GCD)
 *
 * Use recursion. Base case is when y equals 0. In this case, return x.
 * Otherwise, return the GCD of y and the remainder of the division x/y
 *
 * @example
 * gcd(10, 4) => 2
 */
export declare function gcd(x: number, y: number): number;
/**
 * 获取两个数的最小公倍数 lowest common multiple
 *
 * @example
 * lcm(10, 4) => 20
 */
export declare function lcm(x: number, y: number): number;
export declare const DEGREE_TO_RADIAN_FRACTOR: number;
export declare function degree2radian(degree: number): number;
export declare function xcos(degree: number): number;
export declare function xsin(degree: number): number;
export declare function xtan(degree: number): number;
export declare function between(value: number, min: number, max: number): number;
/**
 * 最小周期内的值
 *
 * @example
 *
 * period(3, 60)  -> 3
 * period(61, 60) -> 1
 */
export declare function period(value: number, length: number): number;
/**
 * 返回一个 >= min && < max 的数
 */
export declare function random(min: number, max: number, integer: boolean): number;
/**
 * 计算数组中的数字的平均值
 */
export declare function average(arr: number[]): number;
/**
 * 计算数组中的数字的总和
 */
export declare function sum(arr: number[]): number;
/**
 * Rounds a number to a specified amount of digits
 *
 * Use Math.round() and template literals to round the number to the specified
 * number of digits. Omit the second argument, decimals to round to an integer.
 *
 * @example
 * round(1.005, 2) -> 1.01
 */
export declare function round(n: number, decimals?: number): number;
/**
 * 数组的组合
 *
 * 如果指定了 n，则表示从数组中取 n 个项的组合情况
 * 如果没指定 n，表示所有的组合情况
 */
export declare function combination<T>(arr: T[], n?: number): T[][];
/**
 * 数组的排列
 *
 * 如果指定了 n，则表示从数组中取 n 个项的排列情况
 * 如果没指定 n，表示所有的排列情况
 */
export declare function permutation<T>(arr: T[], n?: number): T[][];
/**
 * Creates an array of numbers progressing from start up to, but not including, end.
 */
export declare function range(end: number): number[];
/**
 * Creates an array of numbers progressing from start up to, but not including, end.
 */
export declare function range(start: number, end: number): number[];
/**
 * Creates an array of numbers progressing from start up to, but not including, end.
 */
export declare function range(start: number, end: number, step: number): number[];
